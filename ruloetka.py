import asyncio
import random
from bot import bot
from aiogram import types, Dispatcher
from commands.db import conn, cursor, url_name, get_balance
from assets.transform import transform_int as tr
from commands.games.db import gametime
from commands.main import win_luser
from assets.antispam import antispam
from decimal import Decimal

from commands.help import CONFIG

CONFIG['help_game'] += '\n  üé≤ –†—É–ª–µ—Ç–∫–∞ (—Å—Ç–∞–≤–∫–∞)'

# —Ü–∏—Ñ–∞—Ä–∫–∏ –∏ –±—É–∫–∞–≤–∫–∏
bets = [
  '–∫—Ä–∞—Å–Ω–æ–µ',
  '—á–µ—Ä–Ω–æ–µ',
  '—á–µ—Ç–Ω–æ–µ',
  '–Ω–µ—á–µ—Ç–Ω–æ–µ',
  '1-12',
  '13-24',
  '25-36',
  '1',
  '2',
  '3',
  '4',
  '5',
  '6',
  '7',
  '8',
  '9',
  '10',
  '11',
  '12',
  '13',
  '14',
  '15',
  '16',
  '17',
  '18',
  '19',
  '20',
  '21',
  '22',
  '23',
  '24',
  '25',
  '26',
  '27',
  '28',
  '29',
  '30',
  '31',
  '32',
  '33',
  '34',
  '35',
  '36',
  '0'
]

# —Ü–≤–µ—Ç–∞
colors = {
  0: '–∑–µ–ª–µ–Ω—ã–π',
  1: '–∫—Ä–∞—Å–Ω—ã–π',
  2: '—á–µ—Ä–Ω—ã–π',
  3: '–∫—Ä–∞—Å–Ω—ã–π',
  4: '—á–µ—Ä–Ω—ã–π',
  5: '–∫—Ä–∞—Å–Ω—ã–π',
  6: '—á–µ—Ä–Ω—ã–π',
  7: '–∫—Ä–∞—Å–Ω—ã–π',
  8: '—á–µ—Ä–Ω—ã–π',
  9: '–∫—Ä–∞—Å–Ω—ã–π',
  10: '—á–µ—Ä–Ω—ã–π',
  11: '—á–µ—Ä–Ω—ã–π',
  12: '–∫—Ä–∞—Å–Ω—ã–π',
  13: '—á–µ—Ä–Ω—ã–π',
  14: '–∫—Ä–∞—Å–Ω—ã–π',
  15: '—á–µ—Ä–Ω—ã–π',
  16: '–∫—Ä–∞—Å–Ω—ã–π',
  17: '—á–µ—Ä–Ω—ã–π',
  18: '–∫—Ä–∞—Å–Ω—ã–π',
  19: '–∫—Ä–∞—Å–Ω—ã–π',
  20: '—á–µ—Ä–Ω—ã–π',
  21: '–∫—Ä–∞—Å–Ω—ã–π',
  22: '—á–µ—Ä–Ω—ã–π',
  23: '–∫—Ä–∞—Å–Ω—ã–π',
  24: '—á–µ—Ä–Ω—ã–π',
  25: '–∫—Ä–∞—Å–Ω—ã–π',
  26: '—á–µ—Ä–Ω—ã–π',
  27: '–∫—Ä–∞—Å–Ω—ã–π',
  28: '—á–µ—Ä–Ω—ã–π',
  29: '—á–µ—Ä–Ω—ã–π',
  30: '–∫—Ä–∞—Å–Ω—ã–π',
  31: '—á–µ—Ä–Ω—ã–π',
  32: '–∫—Ä–∞—Å–Ω—ã–π',
  33: '—á–µ—Ä–Ω—ã–π',
  34: '–∫—Ä–∞—Å–Ω—ã–π',
  35: '—á–µ—Ä–Ω—ã–π',
  36: '–∫—Ä–∞—Å–Ω—ã–π',
}

#–¥–∞—Ç–∞–±–∞—Å–∞
async def upd_balance(uid, summ, type):
  balance = cursor.execute('SELECT balance FROM users WHERE user_id = ?', (uid,)).fetchone()[0]
  if type == "win":
    summ = Decimal(balance) + Decimal(summ)
  else:
    summ = Decimal(balance) - Decimal(summ)

  cursor.execute(f"UPDATE users SET balance = ? WHERE user_id = ?", (str(summ), uid))
  cursor.execute(f"UPDATE users SET games = games + 1 WHERE user_id = ?", (uid,))
  conn.commit()

# –∏–≥—Ä–∞–µ–º?
@antispam
async def roulette(message: types.Message):
  uid = message.from_user.id
  rwin, rloser = await win_luser()
  balance = await get_balance(uid)
  url = await url_name(uid)

  try:
    bet = message.text.lower().split()[1]
    if bet not in bets:
      await message.answer(f'{url}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É {rloser}')
      return
    if message.text.lower().split()[2] in ['–≤—Å–µ', '–≤—Å—ë']:
            summ = balance
    else:
            summ = message.text.split()[2].replace('–µ', 'e')
            summ = int(float(summ))
  except:
    
    await message.answer(f'{url}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —Å—Ç–∞–≤–∫—É –¥–ª—è –∏–≥—Ä—ã {rloser}')
    return

    gt = await gametime(uid)
    if gt == 1:
        await message.answer(f'{url}, –∏–≥—Ä–∞—Ç—å –º–æ–∂–Ω–æ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ {rloser}')
        return

    if summ < 100:
        await message.answer(f'{url}, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 100$ {rloser}')
        return

    if balance < summ:
        await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ {rloser}')
        return

    win_conditions = []
    if bet == '–∫—Ä–∞—Å–Ω–æ–µ':
        win_conditions = [i for i in range(1, 37) if colors[i] == '–∫—Ä–∞—Å–Ω—ã–π']
    elif bet == '—á–µ—Ä–Ω–æ–µ':
        win_conditions = [i for i in range(1, 37) if colors[i] == '—á–µ—Ä–Ω—ã–π']
    elif bet == '—á–µ—Ç–Ω–æ–µ':
        win_conditions = [i for i in range(1, 37) if i % 2 == 0]
    elif bet == '–Ω–µ—á–µ—Ç–Ω–æ–µ':
        win_conditions = [i for i in range(1, 37) if i % 2 != 0]
    elif bet in ['1-12', '13-24', '25-36']:
        start, end = [int(x) for x in bet.split('-')]
        win_conditions = [i for i in range(start, end + 1)]
    else:
        win_conditions = [int(bet)]

    # –≤—Ä–∞—â–∞–µ–º—Å—è –∏ –∫–∏–¥–∞–µ–º –¥–∏–∑—ã
    winning_number = random.randint(0, 36)
    
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∏–Ω
    if winning_number in win_conditions:
        if bet in ['–∫—Ä–∞—Å–Ω–æ–µ', '—á–µ—Ä–Ω–æ–µ', '—á–µ—Ç–Ω–æ–µ', '–Ω–µ—á–µ—Ç–Ω–æ–µ']:
            su = int(summ * 2)
            txt = f"üé≤ | –®–∞—Ä–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞ {winning_number} ({colors[winning_number]}). –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {su} $"
            await upd_balance(uid, su, 'win')
        elif bet in ['1-12', '13-24', '25-36']:
            su = int(summ * 3)
            txt = f"üé≤ | –®–∞—Ä–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞ {winning_number}. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {su} $"
            await upd_balance(uid, su, 'win')
        else:
            su = int(summ * 36)
            txt = f"üé≤ | –®–∞—Ä–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞ {winning_number}. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {su} $"
            await upd_balance(uid, su, 'win')
    else:
        txt = f"üé≤ | –®–∞—Ä–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞ {winning_number} ({colors[winning_number]}). –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
        await upd_balance(uid, summ, 'lose')

    msg = await message.answer("üé≤ | –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω...")
    await asyncio.sleep(2)
    await bot.edit_message_text(chat_id=msg.chat.id, message_id=msg.message_id, text=txt)

#—Ä–µ–≥–∏—Å—Ç—Ä
def register_handlers(dp: Dispatcher):
    dp.register_message_handler(roulette, lambda message: message.text.lower().startswith('—Ä—É–ª–µ—Ç–∫–∞'))

# –æ –º–æ–¥—É–ª–µ
MODULE_DESCRIPTION = {
    'name': 'üé≤ –†—É–ª–µ—Ç–∫–∞',
    'description': '–ø—Ä–æ—Å—Ç–µ–Ω—å–∫–∞—è –∏–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É'
}
