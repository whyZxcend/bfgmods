import asyncio
import random
from bot import bot
from aiogram import types, Dispatcher
from commands.db import conn, cursor, url_name, get_balance
from assets.transform import transform_int as tr
from commands.games.db import gametime
from commands.main import win_luser
from assets.antispam import antispam
from decimal import Decimal

from commands.help import CONFIG

#–∫–æ–Ω—Ñ–∏–≥
CONFIG['help_game'] += '\n   ü™ô –ú–æ–Ω–µ—Ç–∫–∞ (—Å—Ç–∞–≤–∫–∞)'

#–±–¥
async def upd_balance(uid, summ, type):
  balance = cursor.execute('SELECT balance FROM users WHERE user_id = ?', (uid,)).fetchone()[0]
  if type == "win":
    summ = Decimal(balance) + Decimal(summ)
  else:
    summ = Decimal(balance) - Decimal(summ)

  cursor.execute(f"UPDATE users SET balance = ? WHERE user_id = ?", (str(summ), uid))
  cursor.execute(f"UPDATE users SET games = games + 1 WHERE user_id = ?", (uid,))
  conn.commit()

#–∏–≥—Ä–∞–µ–º
@antispam
async def coin_game(message: types.Message):
  uid = message.from_user.id
  rwin, rloser = await win_luser()
  balance = await get_balance(uid)
  url = await url_name(uid)

  try:
    if message.text.lower().split()[1] in ['–≤—Å–µ', '–≤—Å—ë']:
      summ = balance
    else:
      summ = message.text.split()[1].replace('–µ', 'e')
      summ = int(float(summ))
  except:
    await message.answer(f'{url}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —Å—Ç–∞–≤–∫—É –¥–ª—è –∏–≥—Ä—ã {rloser}')
    return

  gt = await gametime(uid)
  if gt == 1:
    await message.answer(f'{url}, –∏–≥—Ä–∞—Ç—å –º–æ–∂–Ω–æ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ {rloser}')
    return

  if summ < 100:
    await message.answer(f'{url}, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 100$ {rloser}')
    return

  if balance < summ:
    await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ {rloser}')
    return

  result = random.choice(['–æ—Ä–µ–ª', '—Ä–µ—à–∫–∞'])
  
  if result == '–æ—Ä–µ–ª':
    await upd_balance(uid, summ, 'win')
    await message.answer(f'{url}, –≤—ã–ø–∞–ª –æ—Ä–µ–ª! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {tr(summ)} ${rwin}')
  else:
    await upd_balance(uid, summ, 'lose')
    await message.answer(f'{url}, –≤—ã–ø–∞–ª–∞ —Ä–µ—à–∫–∞! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {tr(summ)} ${rloser}')

#—Ä–µ–≥–∏—Å—Ç—Ä
def register_handlers(dp: Dispatcher):
    dp.register_message_handler(coin_game, lambda message: message.text.lower().startswith('–º–æ–Ω–µ—Ç–∫–∞'))

#–¥–µ—Å–∫—Ä–∏–ø—Ç
MODULE_DESCRIPTION = {
  'name': 'ü™ô –ú–æ–Ω–µ—Ç–∫–∞',
  'description': '–ü—Ä–æ—Å—Ç–∞—è –∏–≥—Ä–∞ "–ú–æ–Ω–µ—Ç–∫–∞", –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–≥–∞–¥–∞—Ç—å, —á—Ç–æ –≤—ã–ø–∞–¥–µ—Ç: –æ—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞.'
}

